{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user's profile within the JuridicoDocs application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "googleId": {
          "type": "string",
          "description": "The user's Google ID obtained during social authentication."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "displayName": {
          "type": "string",
          "description": "The user's display name."
        },
        "judgingBody": {
          "type": "string",
          "description": "The judging body the user belongs to."
        },
        "role": {
          "type": "string",
          "description": "The user's role within the judging body."
        }
      },
      "required": [
        "id",
        "googleId",
        "email",
        "displayName",
        "judgingBody",
        "role"
      ]
    },
    "LegalProcess": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LegalProcess",
      "type": "object",
      "description": "Represents a legal process imported from the Datajud API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the legal process."
        },
        "userProfileId": {
          "type": "string",
          "description": "Reference to UserProfile. (Relationship: UserProfile 1:N LegalProcess)"
        },
        "processNumber": {
          "type": "string",
          "description": "The process number from the Datajud API."
        },
        "metadata": {
          "type": "string",
          "description": "The metadata fetched from the Datajud API. Stored as a stringified JSON."
        },
        "documentIds": {
          "type": "array",
          "description": "References to Document. (Relationship: LegalProcess 1:N Document)",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "id",
        "userProfileId",
        "processNumber",
        "metadata"
      ]
    },
    "Document": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Document",
      "type": "object",
      "description": "Represents a document associated with a legal process.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the document."
        },
        "legalProcessId": {
          "type": "string",
          "description": "Reference to LegalProcess. (Relationship: LegalProcess 1:N Document)"
        },
        "storagePath": {
          "type": "string",
          "description": "The path to the document in Cloud Storage."
        },
        "summaryId": {
          "type": "string",
          "description": "Reference to Summary. (Relationship: Document 1:1 Summary).  Can be null if no summary exists."
        }
      },
      "required": [
        "id",
        "legalProcessId",
        "storagePath"
      ]
    },
    "Summary": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Summary",
      "type": "object",
      "description": "Represents a summary of a legal document generated by the Ollama API.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the summary."
        },
        "content": {
          "type": "string",
          "description": "The summarized content of the legal document."
        },
        "createdAt": {
          "type": "string",
          "description": "The timestamp when the summary was generated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "content",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information. The 'userId' parameter corresponds to the Firebase Auth UID.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/legalProcesses/{legalProcessId}",
        "definition": {
          "entityName": "LegalProcess",
          "schema": {
            "$ref": "#/backend/entities/LegalProcess"
          },
          "description": "Stores legal process data for a specific user.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the legal process."
            },
            {
              "name": "legalProcessId",
              "description": "The unique identifier of the legal process."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/legalProcesses/{legalProcessId}/documents/{documentId}",
        "definition": {
          "entityName": "Document",
          "schema": {
            "$ref": "#/backend/entities/Document"
          },
          "description": "Stores document data associated with a specific legal process.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the legal process."
            },
            {
              "name": "legalProcessId",
              "description": "The unique identifier of the legal process."
            },
            {
              "name": "documentId",
              "description": "The unique identifier of the document."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/legalProcesses/{legalProcessId}/documents/{documentId}/summary",
        "definition": {
          "entityName": "Summary",
          "schema": {
            "$ref": "#/backend/entities/Summary"
          },
          "description": "Stores the summary of a document associated with a specific legal process.",
          "params": [
            {
              "name": "userId",
              "description": "The Firebase Auth UID of the user who owns the legal process."
            },
            {
              "name": "legalProcessId",
              "description": "The unique identifier of the legal process."
            },
            {
              "name": "documentId",
              "description": "The unique identifier of the document."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to provide a secure, scalable, and easily maintainable data model for the JuridicoDocs application. It focuses on authorization independence and clear data segregation.\n\n*   **Authorization Independence:** The structure ensures authorization independence by using path-based ownership for user-related data. Specifically, legal processes, documents, and summaries are stored as subcollections under the `/users/{userId}` path. This eliminates the need for `get()` calls in security rules, enabling atomic operations and simplifying access control. Each `LegalProcess` includes the `userProfileId`, enforcing ownership.\n*   **Structural Segregation:** The structure segregates data based on ownership. User profiles are stored in a `users` collection, while legal processes, documents, and summaries are stored under user-specific subcollections. This segregation simplifies security rules and ensures that only the owning user can access their respective data.\n*   **QAPs (Rules are not Filters):** The chosen structure facilitates secure `list` operations.  Path-based ownership (`/users/{userId}/legalProcesses/{legalProcessId}`) allows listing legal processes only for a specific user, ensuring that the security rules don't act as filters.\n\nDenormalization: No denormalization is strictly required, as the path-based ownership already grants authorization independence, given the 1:N UserProfile -> LegalProcess -> Document -> Summary relationship."
  }
}