/**
 * @fileoverview Firestore Security Rules for JuridicoDocs
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has full control over their own data tree.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, which corresponds to the Firebase Auth UID.  This structure enables simple path-based authorization.
 *
 * Key Security Decisions:
 * - Users can only access their own data.
 * - Data for one user is completely isolated from other users.
 * - Listing of user profiles is disallowed for security.
 * - Relational integrity is enforced on document creation and updates to maintain path-based ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description Protects the user profiles collection. Only allows a user to read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - A user can create their profile if the userId matches their auth UID.
     * @allow (get) - A user can read their own profile if the userId matches their auth UID.
     * @allow (update) - A user can update their own profile if the userId matches their auth UID.
     * @allow (delete) - A user can delete their own profile if the userId matches their auth UID.
     * @deny (list) - Listing all user profiles is not allowed.
     * @deny (create) - A user cannot create a profile with an ID that doesn't match their auth UID.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the legal processes subcollection under a specific user.
     * @path /users/{userId}/legalProcesses/{legalProcessId}
     * @allow (create) - A user can create a legal process under their own user ID.
     * @allow (get) - A user can get a legal process under their own user ID.
     * @allow (update) - A user can update a legal process under their own user ID.
     * @allow (delete) - A user can delete a legal process under their own user ID.
     * @allow (list) - A user can list the legal processes under their own user ID.
     * @deny (create) - A user cannot create a legal process under another user's ID.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/legalProcesses/{legalProcessId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the documents subcollection under a specific legal process for a user.
     * @path /users/{userId}/legalProcesses/{legalProcessId}/documents/{documentId}
     * @allow (create) - A user can create a document under their legal process.
     * @allow (get) - A user can get a document under their legal process.
     * @allow (update) - A user can update a document under their legal process.
     * @allow (delete) - A user can delete a document under their legal process.
     * @allow (list) - A user can list documents under their legal process.
     * @deny (create) - A user cannot create a document under another user's legal process.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/legalProcesses/{legalProcessId}/documents/{documentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the summary subcollection under a specific document for a user's legal process.
     * @path /users/{userId}/legalProcesses/{legalProcessId}/documents/{documentId}/summary
     * @allow (create) - A user can create a summary under their document.
     * @allow (get) - A user can get a summary under their document.
     * @allow (update) - A user can update a summary under their document.
     * @allow (delete) - A user can delete a summary under their document.
     * @allow (list) - A user can list summaries under their document.
     * @deny (create) - A user cannot create a summary under another user's document.
     * @principle Enforces document ownership and prevents unauthorized data access.
     */
    match /users/{userId}/legalProcesses/{legalProcessId}/documents/{documentId}/summary {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}